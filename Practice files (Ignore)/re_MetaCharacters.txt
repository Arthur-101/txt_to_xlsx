\d :- whole numbers( 0-9 )(single digit) :-  \d = 7,  \d\d=77
\w :- alphanumeric character :-  \w\w\w\w = geek  \w\w\w =! geek
*   :- 0 or more characters  :-  s*  = _,s,ss,sss,ssss…..
+   :- 1 or more characters  :-	s+ = s,ss,sss,ssss…..
?   :- 0 or 1 character  :-  s?  = _ or s
{m} :- occurs “m” times  :- sd{3} = sddd
{m,n} :- min “m” and max “n” times  :- sd{2,3}=sdd or sddd
\W  :-  symbols :- \W = %
[a-z]  or [0-9] :- character set	
geek[sy] = geeky
geek[sy] != geeki


--> Functions:

re.compile(pattern, flags): Compiles a regular expression pattern into a regex object.
re.search(pattern, string, flags): Searches for a pattern in a string and returns the first match.
re.match(pattern, string, flags): Checks if the pattern matches at the beginning of the string.
re.findall(pattern, string, flags): Returns all non-overlapping occurrences of the pattern in the string.
re.finditer(pattern, string, flags): Returns an iterator yielding match objects for all occurrences of the pattern.
re.sub(pattern, replacement, string, count=0, flags): Replaces occurrences of the pattern in the string with the replacement.

--> Flags:
Flags are optional arguments that modify the behavior of the regular expression matching. Common flags include:

re.IGNORECASE or re.I: Case-insensitive matching.
re.MULTILINE or re.M: Enables multiline matching.
re.DOTALL or re.S: Allows the dot . to match any character, including newlines.
re.VERBOSE or re.X: Allows multiline regular expressions with comments and whitespace.
re.ASCII: Restricts character classes \w, \W, \b, \B, \d, \D, \s, \S to ASCII.

--> Special characters (metacharacters):

.: Matches any character except a newline.
^: Matches the start of a string.
$: Matches the end of a string.
*: Matches zero or more occurrences of the preceding character.
+: Matches one or more occurrences of the preceding character.
?: Matches zero or one occurrence of the preceding character.
[]: Matches any character inside the brackets.
[^]: Matches any character not inside the brackets.
|: Acts as an OR operator.
(): Groups a subpattern.
\: Escapes special characters or signifies special sequences (e.g., \d for a digit)
